#!/usr/bin/env bash
#
#############################################################################
#############################################################################
#
# stage
#
# an enterprise linux distro repository package management tool 
#
#############################################################################
#
# Copyright 2011 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of X.
#
#    X is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    X is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with X.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
# note: if you'd like a different license, just let me know which and why
#############################################################################


#############################################################################
#############################################################################
##
## stage
##
##
## DESCRIPTION
##
## stage pulls packages from koji, signs them, and then pushes them to a
## staging area, suitable for subsequent mirroring to the masses
##
##
## NOTES
##
## -
##
#############################################################################


## TODO
# -
# - ...
#


#############################################################################
#############################################################################
##
## local constant definitions
##

# for common script library- libx.sh
x_toolname="el-build"
x_prefix=/usr


#############################################################################
#############################################################################
##
## load system library
##

if [ -f "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh" ]; then
    source "$( dirname $( readlink -e $0 ) )/../../tools/scripts/libx.sh"
elif [ -f "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" ]; then 
    source "${x_prefix}/lib/${x_toolname}/scripts/libx.sh" 
else
    echo "$0: error: fatal: could not load ${x_toolname} system library libx.sh"
    exit 1
fi


#############################################################################
#############################################################################
##
## constant and option default definitions
##

## constants (variable options to be)
signing_user_def="none"
build_area_def="${x_bake_homedotdir}/push-workarea"

dist_test_def="alpha"

# todo: get repochart to have tdv-only packages included in it
repochart_def="${x_bake_cachedir}/tuv.srpms.repochart.txt"

# a fairly sane value
max_pointrelease=31

## derived values

# to enable debug messages if desired
x_debug=1

# to suppress status messages if desired
x_quiet=0


#############################################################################
#############################################################################
##
## functions
##
function usage {
    echo ""
    echo "usage:"
    echo ""
    echo "${progname} \\"
    echo "    [signing_user=${signing_user_def}] \\"
    echo "    [build_area=${build_area_def}] \\"
    echo "    [repochart=${repochart_def}] \\"
    echo "    [dist_test=${dist_test_def}] \\"
    echo "    package ..."
    echo ""
    echo "packages can be a package name, or a .src.rpm filename"
    echo ""
    echo ""
    echo ""
    exit 1
}


function workaround_pkg_name {
    new_name="${1}"


    if [ "${new_name}" == "guile-1.8.7-4.el6" ]; then
	new_name="guile-1.8.7-4.el6.0.asc"
    fi

    if [ "${new_name}" == "zsh-4.3.10-4.1.el6" ]; then
	new_name="zsh-4.3.10-4.1.el6.asc"
    fi

    dist_prefix=$( echo "${new_name}" | sed -e 's/\.el6.*$//' )

    actual_build=$( koji search build ${new_name} )

    if [ "${new_name}" != "${actual_build}" ]; then
	candidate=$( \
	    koji search build "${dist_prefix}"* \
	    | grep -v "\.ascendos6" \
	    | sort --sort=version \
	    | tail -1 )
	if ( koji buildinfo "${candidate}" | grep -q "State: COMPLETE" ); then
	    new_name="${candidate}"
	fi
    fi

    echo "${new_name}"
}


#############################################################################
#
## set option value defaults
#
signing_user="${signing_user_def}"
build_area="${build_area_def}"
repochart="${repochart_def}"
dist_test="${dist_test_def}"


#############################################################################
#############################################################################
##
## main
##

status "initializing ..."

dist_version_major=$( echo "${x_bake_distrover}" | sed -e 's/\..*//' )


#############################################################################
status "processing options ..."

# this is a simple enough method for a first pass.  I'd have brought in
# viros's libvopt.sh if it wasn't so complex.
pkg_list=""
for option in "$@"; do
    if [ "${option}" == "usage" ]; then
	usage
    elif [ "${option}" == "--usage" ]; then
	usage
    elif [ "${option}" == "help" ]; then
	usage
    fi
    if ( echo "${option}" | grep -q "=" ); then
	# simplest
#	eval "${option}"
	# a bit better, allows e.g. distroname="Two Words"
	# (though a two word distroname is as yet untested and may not work anyway)
	opt_name=$( echo "${option}" | sed -e 's/=.*//' )
	opt_val=$( echo "${option}" | sed -e 's/[^=]*=//' )
	eval "${opt_name}='${opt_val}'"
    else
	pkg_list="${pkg_list} ${option}"
    fi
done


## derived values

# directory to koji download-build to before signing
staging_dir="${build_area}/pkg-staging"
secret_dir="${build_area}/.keys-${signing_user}"

# identifier for tmp filenames
tmp_orig_str="orig-${progname}"


#############################################################################
status "fiddling with keys ..."

# TODO: also support signing with autogenerated one-time throwaway key
if [ "${signing_user}" != "none" ]; then

    # if signing, user must have a private key to sign with
    if [ ! -d "${secret_dir}" ]; then
	die "user keydir ${secret_dir} for user ${signing_user} does not exist"
    fi

    # make sure not to step on users files while doing signing
    if [ -d "${HOME}/.gnupg" ]; then
	mv "${HOME}/.gnupg" "${HOME}/.gnupg.${tmp_orig_str}.$$"
    fi
    if [ -f "${HOME}/.rpmmacros" ]; then
	mv "${HOME}/.rpmmacros" "${HOME}/.rpmmacros.${tmp_orig_str}.$$"
    fi
    
    # TODO: use GNUPGHOME 
    cp -a "${secret_dir}" "${HOME}/.gnupg"
    # TODO: use env HOME=
    cp -a "${secret_dir}.rpmmacros" "${HOME}/.rpmmacros"

fi


#############################################################################
status "pulling packages from build server ..."

packages_to_sign_list=""

# the package name, as in the .src.rpm submitted to koji
# e.g. zsh-4.3.10-4.1.el6.asc for
# > koji build ascendos-60 zsh-4.3.10-4.1.el6.asc.src.rpm
# > koji download-build ascendos-60 zsh-4.3.10-4.1.el6.asc.src.rpm
for package in ${pkg_list}; do

    status "processing package: fetching: ${package} ..."

    # this supports either input as a .src.rpm name or a package/ver name
    pkg_name=$( echo "$( basename ${package} )" | sed -e 's/\.src\.rpm//' )

    # WORKAROUND for off-spec pkg_name(s)
    pkg_name=$( workaround_pkg_name "${pkg_name}" )

    status "pulling package from build system: ${pkg_name} ..."

    if [ -d "${staging_dir}/${pkg_name}" ]; then
	die "staging directory already exists, aborting."
    else
	if ( ! mkdir "${staging_dir}/${pkg_name}" ); then
	    die "could not create staging/package directory :" \
		"${staging_dir}/${pkg_name}"
	fi
    fi

    pushd "${staging_dir}/${pkg_name}" 2>&1 > /dev/null

    koji \
	download-build \
	--debuginfo \
	--arch=noarch \
	--arch=i386 \
	--arch=i686 \
	--arch=x86_64 \
	--arch=src  \
	${pkg_name}
    koji_retval=$?
    if (( $koji_retval )); then
	# TODO: revert this back to error/die
	status "could not koji download the package: ${pkg_name} ..."
    fi

    new_packages=$( ls -1A *.rpm )
    for package in ${new_packages}; do
	# if desired, prefer existing published signed packages
	if [ "${x_dev_staging_restage_sources}" != "" ]; then
	    # note: this doesn't allow spaces in paths for _sources
	    foundrpm=$( \
		find \
		${x_dev_staging_restage_sources} \
		-name "${package}" \
		-print )

	    if [ -f "${foundrpm}" ]; then
		debug "utilizing published rpm: ${foundrpm} ..."
		# replace the one from koji with the existing published version
		rm -f "./${package}"
		ln "${foundrpm}" "./${package}"
		# TODO: validate/ensure existing package/signature
	    else
		debug "no published rpm found for: ${package} ..."
		packages_to_sign_list="\
${packages_to_sign_list} ${staging_dir}/${pkg_name}/${package}"
	    fi

	else
	    packages_to_sign_list="\
${packages_to_sign_list} ${staging_dir}/${pkg_name}/${package}"
	fi
    done

    popd 2>&1 > /dev/null
done
    
if [ "${signing_user}" != "none" ]; then
    status "signing packages: ${packages_to_sign_list} ..."
    if ( ! echo "${packages_to_sign_list}" | grep '^\s*$' ); then
	if ( ! rpm --addsign ${packages_to_sign_list} ); then
	    die "package signing failed"
	fi
    fi
else
    status "NOT signing packages..."
fi

#############################################################################
status "staging freshly pulled/signed packages ..."

for package in ${pkg_list}; do
    status "processing package: staging: ${package} ..."

    pkg_name=$( echo "$( basename ${package} )" | sed -e 's/\.src\.rpm//' )

    # WORKAROUND for off-spec pkg_name(s)
    pkg_name=$( workaround_pkg_name "${pkg_name}" )

    # get upstream package name if this is a modified version
    upstream_package_name="${package}"
    # I guess this is reasonable as '.' can't be part of a package name(?)
    if ( echo "${upstream_package_name}" | grep "\.asc" ); then
	upstream_package_name=$( \
	    echo "${upstream_package_name}" \
	    | sed -e 's/\.asc.*$//' )
    fi

#    pushd "${staging_dir}/${pkg_name}" 2>&1 > /dev/null
    pushd "${staging_dir}/${pkg_name}"

    ## initial values / global placements

    # note: existing structure leaves src out of everything.  good reasons??
    src_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/SRPMS
"
    noarch_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
"
    x32_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
"
    x64_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
"
    noarch_debuginfo_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
${x_dev_staging_root}/debuginfo
"
    x32_debuginfo_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
${x_dev_staging_root}/debuginfo
"
    x64_debuginfo_rpm_homes="\
${x_dev_staging_root}/union
${x_dev_staging_root}/everything
${x_dev_staging_root}/debuginfo
"


    # iterate over staging decisions for each point release
    for (( pr=0 ; ${pr} < ${max_pointrelease} ; pr=$(( ${pr} + 1 )) )); do

#############################################################################
	# first do base (... then updates, see below)

	#${x_cached_repochart_text_filename}
	# todo: sed .'s into \.'s in the grep arg?
	chartline=$( \
	    cat "${x_cached_repochart_text_filename}" \
	    | grep "${upstream_package_name}\s" )

	bintype="${dist_version_major}.${pr}-base"

	if ( echo "${chartline}" | grep -q "${bintype}" ); then
	    status "package: ${package}: will get staged as ${bintype} ..."

            # .0 is presently odd
	    case "${pr}" in
#		0)
#		    noarch_rpm_homes="\
#${noarch_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/os/i386/Packages
#${x_dev_staging_root}/${dist_version_major}.${pr}/os/x86_64/Packages
#"
#		    x32_rpm_homes="\
#${x32_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/os/i386/Packages
#${x_dev_staging_root}/${dist_version_major}.${pr}/os/x86_64/Packages
#"
#		    x64_rpm_homes="\
#${x64_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/os/x86_64/Packages
#"
#		    ;;
		*)
		    noarch_rpm_homes="\
${noarch_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/i386/os/Packages
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/os/Packages
"
		    x32_rpm_homes="\
${x32_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/i386/os/Packages
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/os/Packages
"
		    x64_rpm_homes="\
${x64_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/os/Packages
"
                    ;;
            esac

	fi
	
	bintype="${dist_version_major}.${pr}-updates"

	if ( echo "${chartline}" | grep -q "${bintype}" ); then
	    status "package: ${package}: will get staged as ${bintype} ..."

	    case "${pr}" in
		# .0 is presently odd
#		0)
#		    noarch_rpm_homes="\
#${noarch_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/updates/i386
#${x_dev_staging_root}/${dist_version_major}.${pr}/updates/x86_64
#"
#		    x32_rpm_homes="\
#${x32_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/updates/i386
#${x_dev_staging_root}/${dist_version_major}.${pr}/updates/x86_64
#"
#		    x64_rpm_homes="\
#${x64_rpm_homes}
#${x_dev_staging_root}/${dist_version_major}.${pr}/updates/x86_64
#"
#                    ;;

		*)
		    noarch_rpm_homes="\
${noarch_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/i386/updates
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/updates
"
		    x32_rpm_homes="\
${x32_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/i386/updates
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/updates
"
		    x64_rpm_homes="\
${x64_rpm_homes}
${x_dev_staging_root}/${dist_version_major}.${pr}/x86_64/updates
"
                    # do nothing for now
                    ;;
            esac

	fi

    done
    # end iteration over point releases checking the repochart for destinations

    for rpm in $( ls -1A *.src.rpm 2> /dev/null ); do
	status "processing src_rpm: ${rpm}"
	for newhome in ${src_rpm_homes}; do
	    if ( ! mkdir -p "${newhome}" ); then
		die "could not ensure target repo exists: ${newhome}"
	    fi
	    debug ln "${rpm}" "${newhome}/${rpm}"
	    ln "${rpm}" "${newhome}/${rpm}"
	done
    done

    for rpm in $( ls -1A *.noarch.rpm 2> /dev/null ); do
	# note: mingw32 seems to be the only noarch packages with debuginfo packages
	if ( echo "${rpm}" | grep -q debuginfo ); then
	    status "processing noarch_debuginfo_rpm: ${rpm}"
	    for newhome in ${noarch_debuginfo_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	else
	    status "processing noarch_rpm: ${rpm}"
	    for newhome in ${noarch_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	fi
    done
    for rpm in $( ls -1A *.i[36]86.rpm 2> /dev/null ); do
	if ( echo "${rpm}" | grep -q debuginfo ); then
	    status "processing x32_debuginfo_rpm: ${rpm}"
	    for newhome in ${x32_debuginfo_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	else
	    status "processing x32_rpm: ${rpm}"
	    for newhome in ${x32_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	fi
    done
    for rpm in $( ls -1A *.x86_64.rpm 2> /dev/null ); do
	if ( echo "${rpm}" | grep -q debuginfo ); then
	    status "processing x64-debuginfo-rpm: ${rpm}"
	    for newhome in ${x64_debuginfo_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	else
	    status "processing x64-rpm: ${rpm}"
	    for newhome in ${x64_rpm_homes}; do
		if ( ! mkdir -p "${newhome}" ); then
		    die "could not ensure target repo exists: ${newhome}"
		fi
		debug ln "${rpm}" "${newhome}/${rpm}"
		ln "${rpm}" "${newhome}/${rpm}"
	    done
	fi
    done
    popd
#    popd 2>&1 > /dev/null
    # leave pkg dir
done

## clean up and return things to order

if [ "${signing_user}" != "none" ]; then
    rm -rf "${HOME}/.gnupg"
    rm -f "${HOME}/.rpmmacros"

    if [ -f "${HOME}/.rpmmacros.${tmp_orig_str}.$$" ]; then
	mv "${HOME}/.rpmmacros.${tmp_orig_str}.$$" "${HOME}/.rpmmacros"
    fi
    if [ -d "${HOME}/.gnupg.${tmp_orig_str}.$$" ]; then
	mv "${HOME}/.gnupg.${tmp_orig_str}.$$" "${HOME}/.gnupg"
    fi
fi


## update the repodata

pushd "${x_dev_staging_root}" 2>&1 > /dev/null

createrepo -d --update union
createrepo -d --update SRPMS
createrepo -d --update everything
createrepo -d --update debuginfo

# NOTE: the current development external ascendos layout seems very confused (6.0/os/arch vs 6.1/arch/os)
#pushd "${dist_version_major}.0/os/i386" 2>&1 > /dev/null
#createrepo -d --update -g repodata/comps-asc6-i386.xml .
#popd 2>&1 > /dev/null
#pushd "${dist_version_major}.0/os/x86_64" 2>&1 > /dev/null
#createrepo -d --update -g repodata/comps-asc6-x86_64.xml .
#popd 2>&1 > /dev/null
#
#createrepo -d --update "${dist_version_major}.0/updates/i386"
#createrepo -d --update "${dist_version_major}.0/updates/x86_64" 
#
#pushd "${dist_version_major}.1/i386/os" 2>&1 > /dev/null
#createrepo -d --update -g repodata/comps-asc6-i386.xml .
#popd 2>&1 > /dev/null
#pushd "${dist_version_major}.1/x86_64/os" 2>&1 > /dev/null
#createrepo -d --update -g repodata/comps-asc6-x86_64.xml .
#popd 2>&1 > /dev/null

for (( i=0 ; ${i} < 31 ; i=$(( ${i} + 1 )) )); do 
    if [ -d "${dist_version_major}.${i}/x86_64/os" ]; then
	pushd "${dist_version_major}.${i}/x86_64/os" 2>&1 > /dev/null
	createrepo -d --update -g repodata/comps-asc6-i386.xml .
	popd 2>&1 > /dev/null
    fi
    if [ -d "${dist_version_major}.${i}/x86_64/updates" ]; then
	pushd "${dist_version_major}.${i}/x86_64/updates" 2>&1 > /dev/null
	createrepo -d --update .
	popd 2>&1 > /dev/null
    fi
    if [ -d "${dist_version_major}.${i}/i386/os" ]; then
	pushd "${dist_version_major}.${i}/i386/os" 2>&1 > /dev/null
	createrepo -d --update -g repodata/comps-asc6-i386.xml .
	popd 2>&1 > /dev/null
    fi
    if [ -d "${dist_version_major}.${i}/i386/updates" ]; then
	pushd "${dist_version_major}.${i}/i386/updates" 2>&1 > /dev/null
	createrepo -d --update .
	popd 2>&1 > /dev/null
    fi
done

popd 2>&1 > /dev/null
# leave ${x_dev_staging_root}


#############################################################################
## end script - only notes below
#############################################################################
#
# dmc: I think the staging dir for current alphas should map underneath the
#   development subdirectory of the mirror root, not the mroot itself. $0.02
#
#
